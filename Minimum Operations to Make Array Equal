//----------------------2-Pointer Approach------------------
T.C => O(n);

class Solution {
public:
    int minOperations(int n) {
        if(n==1) return 0;
        int low=0;
        int high=1;
        int sum=0;
        vector<int> arr;
        for(int i=0;i<n;i++)
        {
            sum+= (2*i)+1;
            arr.push_back((2*i)+1);
        }
        int target=sum/n;
        int count=0;
        while(low<=high && high<arr.size())
        {
            if(arr[low]<target && arr[high]>target)
            {
                int c1=arr[high]-target;
                int c2=target-arr[low];
                int c=min(c1,c2);
                count+=c;
                arr[high]-=c;
                arr[low]+=c;
            }
            if(arr[low]<target && arr[high]<=target)
                high++;
            else if(arr[low]==target && arr[high]>target)
                low++;
            else
            {
                low++;
                high--;
            }
        }
        return count;
    }
};


//---------------------Approach 2--------------------------
//T.C => O (1)

//You just need to reach the center number which requires odd number of moves each time.

int minOperations(int n) {
        return n%2==0?(n/2)*(n/2):(n/2)*(n/2+1);
}
