//------------------------------------------Approach 1 (Using merge Sort)----------------------------------------------------------
//T.C => O(nlogn)

class Solution {
public:
    int merge(vector<int>& A, vector<int>& temp, int left, int mid, int right)
    {
        int i,j,k;
        int count=0;
        
        i=left;
        j=mid;
        k=left;
        
        while((i<= mid-1) && (j<=right))
        {
            if(A[i]<=A[j])
            {
                temp[k]=A[i];
                k++;
                i++;
            }
            else 
            {
                temp[k]=A[j];
                k++;
                j++;
                count=count+(mid-i);
            }
        }
        
        while(i<=(mid-1))
        {
            temp[k]=A[i];
            k++;
            i++;
        }
        while(j<=right)
        {
            temp[k]=A[j];
            k++;
            j++;
        }
        
//         copying sorted elements into provided array
        for(int i=left;i<=right;i++)
        {
            A[i]=temp[i];
        }
        
        return count;
    }
    int merge_sort(vector<int>& A, vector<int>& temp, int left, int right)
    {
        int mid, count=0;
        while(right>left)
        {
            mid=(left+right)/2;
            count+= merge_sort(A,temp,left,mid);
            count+= merge_sort(A,temp,mid+1,right);
            
            count+= merge(A,temp,left,mid+1,right);
        }
        return count;
    }
    bool isIdealPermutation(vector<int>& A) {
        vector<int> temp(A.size());
        int global=merge_sort(A,temp,0,A.size()-1);
        int local=0;
        for(int i=0;i<A.size()-1;i++)
        {
            if(A[i]>A[i+1])
                local++;
        }
        return (local==global);
    }
};



//------------------------------------------Approach 2 (Observational)----------------------------------------------------------
//T.C => O(n)

// Explanation
// Global Inversion : A[i] > A[j] => 0<=i<j<N
// Local Inversion: A[i] > A[j] => j = i+1

// So from above definition we see that all local inversion is global inversion but not vice versa always.
// We need to find if global inversion == local inversion. 

// When this happens (global inversion == local inversion)? => Only when every global inversion is a local inversion

// When inversion happens ? => When an element is displaced from its original position in sorted array

// When an element is displaced 1 distance from its original position it makes only 1 global and local inversion ([1,0,2])
// 	which makes global inversion == local inversion.
    
// If an element is displaced K>1 distance from its original position then it makes 1 local inversion but K global inversions ([1,2,0])
//     which makes global inversion != local inversion. 

// So it is sufficient to find a global inversion which is not local inversion. 
// So we need to find if any element is displaced more than 1 distance from its original position in sorted array.

// Element Displacement distance = abs(A[i] - i)

class Solution {
public:
    bool isIdealPermutation(vector<int>& A) {
        for (int i = 0; i < A.size(); i++) {
            if (abs(i - A[i]) > 1)
                return false;
        }

        return true;
    }
};
