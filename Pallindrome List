/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode *reverse(ListNode *head)
{
    ListNode *prev=NULL;
    ListNode *curr=head;
    while(curr!=NULL)
    {
        ListNode *Next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=Next;
    }
    return prev;
}
    bool isPalindrome(ListNode* head) {
        if(!head) return true;
        if(head->next==NULL) return true;
        
        ListNode *slow=head;
        ListNode *fast=head;
        ListNode *prev=head;
        while(fast!=NULL && fast->next!=NULL)
        {
            prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        if(fast!=NULL)
        {
            ListNode *mid=slow;
            slow=slow->next;
        }
        prev->next=NULL;
        ListNode *second=reverse(slow);
        while(second && head)
        {
            if(second->val != head->val)
                return false;
            second=second->next;
            head=head->next;
        }
        return true;
        
    }
};
