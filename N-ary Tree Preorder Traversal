//----------Recurssive-----------------
class Solution {
public:
    vector <int> v;
    vector<int> preorder(Node* root) {
                if(root){
            v.push_back(root->val);
			for(auto it: root->children){
            preorder(it);
        }
            
        }
        return v;
    }
};


//----------Iterative----------------
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector <int> v;
    vector<int> preorder(Node* root) {
        
    if(root==NULL) return {};
    stack<Node*> stk;
    vector<int> res;
    stk.push(root);
    while(!stk.empty()) {
        Node* temp=stk.top();
        stk.pop();
        res.push_back(temp->val);
        
        for(int i=temp->children.size()-1;i>=0;i--) stk.push(temp->children[i]);
    }
    return res;
    }
};
